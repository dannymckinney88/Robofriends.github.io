{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js","components/robots.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLocaleLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4NAeeA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,yBAAKC,UAAY,2CACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,QACpD,6BACI,4BAAKL,GACL,2BAAIC,MCULK,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEKA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCInBW,EAdG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aACjB,OACI,yBAAKV,UAAU,OACf,2BACCA,UAAW,mCACXW,KAAK,SACNC,YAAY,gBACZC,SAAUH,MCCHI,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,YC6CJC,E,kDAxCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAM,CACPxB,OAAQ,GACRqB,YAAa,IAJP,E,gEAQM,IAAD,OACfI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEpB,OAAQ6B,S,+BAQtC,IAAD,EAC0BC,KAAKN,MAA7BxB,EADF,EACEA,OAAQqB,EADV,EACUA,YACRU,EAAiB/B,EAAOgC,QAAO,SAAAhC,GACjC,OAAOA,EAAOP,KAAKwC,oBAAoBC,SAASb,EAAYY,wBAEhE,OAAQjC,EAAOmC,OAGV,yBAAKvC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAE,EAAF,CAAYU,aAAcwB,KAAKZ,iBAC/B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlB,OAAQ+B,MANxB,2C,GA3BOK,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OACJ,kBAAC,EAAD,CAAK3C,OCZY,KDahB4C,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.65cc1844.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow '>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"Pic\"/>\r\n            <div >  \r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    return(\r\n        <div>\r\n         {\r\n             robots.map((user,i) => {\r\n             return <Card \r\n                 key={i} \r\n                 id={robots[i].id} \r\n                 name={robots[i].name} \r\n                 email={robots[i].email}/>\r\n              })\r\n           }\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) =>{\r\n    return (\r\n        <div className=\"pa2\">\r\n        <input\r\n         className= 'pa3 ba b--green bg lightest-blue'\r\n         type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n        />\r\n\r\n        </div>\r\n    )\r\n    }\r\n\r\nexport default SearchBox","import React from \"react\";\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from \"react\"\r\nimport CardList from \"../components/CardList\"\r\nimport SearchBox from \"../components/SearchBox\"\r\nimport \"./App.css\"\r\nimport Scroll from '../components/Scroll'\r\nimport { robots } from \"../components/robots\"\r\n\r\n\r\nclass App extends Component{\r\n  //this is state right here (A smart component)\r\n    constructor() {\r\n        super()\r\n        this.state={\r\n            robots: [],\r\n            searchfield: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n  \r\n    }\r\n    \r\n    render(){\r\n      const { robots, searchfield } = this.state\r\n        const filteredRobots = robots.filter(robots => {\r\n            return robots.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\r\n        })\r\n        return !robots.length ?\r\n           <h1>Loading</h1> :\r\n           (\r\n             <div className='tc'>\r\n               <h1 className=\"f1\">RoboFriends</h1>\r\n               < SearchBox searchChange={this.onSearchChange}/>\r\n               <Scroll>\r\n                 <CardList robots={filteredRobots}/>\r\n               </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n  }  \r\n \r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport { robots } from \"./components/robots\"\n\n\n\nReactDOM.render(\n     <App robots={robots}/>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n","export const robots = [\n  // {\n  //   id: 1,\n  //   name: 'Leanne Graham',\n  //   username: 'Bret',\n  //   email: 'Sincere@april.biz'\n  // },\n//   {\n//     id: 2,\n//     name: 'Ervin Howell',\n//     username: 'Antonette',\n//     email: 'Shanna@melissa.tv'\n//   },\n//   {\n//     id: 3,\n//     name: 'Clementine Bauch',\n//     username: 'Samantha',\n//     email: 'Nathan@yesenia.net'\n//   },\n//   {\n//     id: 4,\n//     name: 'Patricia Lebsack',\n//     username: 'Karianne',\n//     email: 'Julianne.OConner@kory.org'\n//   },\n//   {\n//     id: 5,\n//     name: 'Chelsey Dietrich',\n//     username: 'Kamren',\n//     email: 'Lucio_Hettinger@annie.ca'\n//   },\n//   {\n//     id: 6,\n//     name: 'Mrs. Dennis Schulist',\n//     username: 'Leopoldo_Corkery',\n//     email: 'Karley_Dach@jasper.info'\n//   },\n//   {\n//     id: 7,\n//     name: 'Kurtis Weissnat',\n//     username: 'Elwyn.Skiles',\n//     email: 'Telly.Hoeger@billy.biz'\n//   },\n//   {\n//     id: 8,\n//     name: 'Nicholas Runolfsdottir V',\n//     username: 'Maxime_Nienow',\n//     email: 'Sherwood@rosamond.me'\n//   },\n//   {\n//     id: 9,\n//     name: 'Glenna Reichert',\n//     username: 'Delphine',\n//     email: 'Chaim_McDermott@dana.io'\n//   },\n//   {\n//     id: 10,\n//     name: 'Clementina DuBuque',\n//     username: 'Moriah.Stanton',\n//     email: 'Rey.Padberg@karina.biz'\n//   }\n];\n"],"sourceRoot":""}